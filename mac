#!/bin/sh

# Welcome to the oakworks laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

_log() {
  local msg=$*
  local color_normal
  local color_success
  
  color_normal=$(tput sgr0;)
  color_error=$(tput setaf 1;)
  color_success=$(tput bold; tput setaf 2;)
  color_warn=$(tput setaf 3;)
  color_info=$(tput setaf 6;)
  color_prompt=$(tput bold;)

  # default color
  current_color="${color_normal}"

  if ! [[ -z $2 ]]; then
    local message_type=$1
    # remove message type from the string (plus a space)
    msg=${msg/$message_type /}
    if [ "$message_type" = "warn" ]; then
      current_color="${color_warn}"
    fi
    if [ "$message_type" = "info" ]; then
      current_color="${color_info}"
    fi
    if [ "$message_type" = "success" ]; then
      current_color="${color_success}"
    fi
    if [ "$message_type" = "error" ]; then
      current_color="${color_error}"
    fi
    if [ "$message_type" = "prompt" ]; then
      current_color="${color_info}"
      color_normal="${color_prompt}"
    fi
  fi

  # shellcheck disable=SC2059
  printf "${current_color}%s${color_normal}\n" "$msg" >&2
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret ERR' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# shellcheck disable=SC2016

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

append_to_fishfile() {
  local text="$1"
  local file="$HOME/.config/fish/fishfile.txt"
  append_to_file "$file" "$text" 
}

append_to_file() {
  local file="$1"
  local text="$2"
  local hardreturn="${3:-0}"
  
  if ! grep -Fqs "$text" "$file"; then
    if [ "$hardreturn" -eq 1 ]; then
      printf "\\n%s" >> "$file"
    fi
    
    printf "\\n%s" "$text" >> "$file"
    
  fi

}

append_to_fishconfig(){
  local text="$1"
  local hardreturn="${2:-0}"
  local file="$HOME/.config/fish/config.fish.txt"
  append_to_file "$file" "$text" "$hardreturn"
}

fisher(){

read -r -d '' fisher <<'EOF'

if not functions -q fisher
  set -q XDG_CONFIG_HOME; or set XDG_CONFIG_HOME ~/.config
  curl https://git.io/fisher --create-dirs -sLo $XDG_CONFIG_HOME/fish/functions/fisher.fish
  fish -c fisher
end

EOF
  append_to_fishconfig "$fisher"
}



install_homebrew(){
  if ! command -v brew >/dev/null; then
    _log "Installing Homebrew ..."
      curl -fsS \
        'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

      export PATH="/usr/local/bin:$PATH"
  fi
}

setup_fish(){
  _log "configuring fish shell..."
  fisher
  append_to_fishconfig "#source iterm integration" 1
  append_to_fishconfig "test -e {$HOME}/.iterm2_shell_integration.fish ; and source {$HOME}/.iterm2_shell_integration.fish"
  append_to_fishconfig "alias m ""meteor""" 1
  append_to_fishconfig "alias c. ""code ."""
  append_to_fishconfig "alias c ""code"""
  append_to_fishconfig "alias git ""hub"""
  append_to_fishconfig "set -g fish_emoji_width 2" 1
  append_to_fishconfig "eval (starship init fish)" 1
  append_to_fishconfig "eval (direnv hook fish)" 1

  append_to_fishfile "edc/bass"
  append_to_fishfile "franciscolourenco/done"
  append_to_fishfile "laughedelic/pisces"
  append_to_fishfile "oh-my-fish/plugin-bang-bang"
  append_to_fishfile "brigand/fast-nvm-fish"
}

update_shell() {
  local shell_path;
  _log $shell_path
  shell_path="$(command -V fish)"
  if [ -z "$shell_path" ]; then
    _log "Installing fish shell..."
    brew install fish
    setup_fish
  fi

  _log "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    _log "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  sudo chsh -s "$shell_path" "$USER"
  fi
}

install_homebrew

case "$SHELL" in
  */fish)
    if [ "$(command -v fish)" != '/usr/local/bin/fish' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if brew list | grep -Fq brew-cask; then
  _log "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

_log "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "mongodb/brew"
tap "heroku/brew"
tap "shopify/shopify"
tap "homebrew/cask-fonts"


# Unix
brew "autojump"
brew "direnv"
brew "git"
brew "openssl"
brew "python"
# brew "python@2"
# ERROR: Error: No available formula with the name "python@2"
# ==> Searching for a previously deleted formula (in the last month)...
# Error: No previously deleted formula found.
# Error: No similarly named formulae found.
# ==> Searching taps on GitHub...
# ==> Searching for similarly named formulae...
# ==> Searching taps...
# Error: No formulae found in taps.
# Installing python@2 has failed!
brew "rename"
brew "starship"
brew "terminal-notifier"
brew "vim"
brew "watchman"
brew "wget"

# Heroku
brew "heroku/brew/heroku"

# AWS
brew "awscli"

# Shopify Themekit
brew "shopify/shopify/themekit"

# GitHub
brew "git-flow"
brew "hub"

# Image manipulation
brew "graphicsmagick"

# Programming language prerequisites and package managers
brew "coreutils"
brew "yarn"

# cask "gpg"
# ERROR: Cask 'gpg' is unavailable: No Cask with this name exists. Did you mean one of these?
# gpg-suite
# gpg-suite-no-mail
# gpg-suite-pinentry
# gpg-sync
# Installing gpg has failed!

# Tools
cask "iterm2"
cask "visual-studio-code"
cask "envkey"
cask "slack"
#cask "google-chrome"
#disabled to save time, renable when deployed.
cask "robo-3t"
cask "font-hack-nerd-font"
cask "spectacle"

# Databases
brew "redis"
brew "mongodb/brew/mongodb-community"
EOF

_log "Update heroku binary ..."
brew unlink heroku
brew link -f heroku

_log "Installing NVM (Node Version Manager) ..."
if command -v nvm --version; then
  echo "nvm installed"
  else
  echo "no nvm, installing"
fi
#curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh

_log "Checking direnv helpers..."
if test -f "$HOME/.config/direnv/helpers.sh"; then
  echo "Direnv helpers already installed"
  else
  echo "Installing direnv helpers..."
  curl -o ~/.config/direnv/helpers.sh --create-dirs https://raw.githubusercontent.com/steve-ross/direnv-helpers/master/helpers.sh && echo -n "source ~/.config/direnv/helpers.sh" >> ~/.config/direnv/direnvrc
fi

 _log "
  ______             __              __       __                      __                 
 /      \\           |  \\            |  \\  _  |  \\                    |  \\                
|  \$\$\$\$\$\$\\  ______  | \$\$   __       | \$\$ / \\ | \$\$  ______    ______  | \$\$   __   _______ 
| \$\$  | \$\$ |      \\ | \$\$  /  \\      | \$\$/  \$\\| \$\$ /      \\  /      \\ | \$\$  /  \\ /       \\
| \$\$  | \$\$  \\\$\$\$\$\$\$\\| \$\$_/  \$\$      | \$\$  \$\$\$\\ \$\$|  \$\$\$\$\$\$\\|  \$\$\$\$\$\$\\| \$\$_/  \$\$|  \$\$\$\$\$\$\$
| \$\$  | \$\$ /      \$\$| \$\$   \$\$       | \$\$ \$\$\\\$\$\\\$\$| \$\$  | \$\$| \$\$   \\\$\$| \$\$   \$\$  \\\$\$    \\ 
| \$\$__/ \$\$|  \$\$\$\$\$\$\$| \$\$\$\$\$\$\\       | \$\$\$\$  \\\$\$\$\$| \$\$__/ \$\$| \$\$      | \$\$\$\$\$\$\\  _\\\$\$\$\$\$\$\\
 \\\$\$    \$\$ \\\$\$    \$\$| \$\$  \\\$\$\\      | \$\$\$    \\\$\$\$ \\\$\$    \$\$| \$\$      | \$\$  \\\$\$\\|       \$\$
  \\\$\$\$\$\$\$   \\\$\$\$\$\$\$\$ \\\$\$   \\\$\$       \\\$\$      \\\$\$  \\\$\$\$\$\$\$  \\\$\$       \\\$\$   \\\$\$ \\\$\$\$\$\$\$\$ 
  
  "


if [ -f "$HOME/.laptop.local" ]; then
  _log "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
